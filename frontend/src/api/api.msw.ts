/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * freeheat_test API
 * Documentation of API endpoints of freeheat_test
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getApiDjRestAuthLoginCreateMock = () => ({key: faker.random.word()})

export const getApiDjRestAuthLogoutCreateMock = () => ({detail: faker.random.word()})

export const getApiDjRestAuthPasswordChangeCreateMock = () => ({detail: faker.random.word()})

export const getApiDjRestAuthPasswordResetCreateMock = () => ({detail: faker.random.word()})

export const getApiDjRestAuthPasswordResetConfirmCreateMock = () => ({detail: faker.random.word()})

export const getApiDjRestAuthRegisterCreateMock = () => ({username: faker.random.word(), email: faker.internet.email(), password1: faker.random.word(), password2: faker.random.word(), first_name: faker.helpers.arrayElement([faker.random.word(), undefined]), last_name: faker.helpers.arrayElement([faker.random.word(), undefined])})

export const getApiDjRestAuthUserRetrieveMock = () => ({pk: faker.datatype.number({min: undefined, max: undefined}), username: faker.random.word(), email: faker.internet.email(), first_name: faker.random.word(), last_name: faker.random.word()})

export const getApiDjRestAuthUserUpdateMock = () => ({pk: faker.datatype.number({min: undefined, max: undefined}), username: faker.random.word(), email: faker.internet.email(), first_name: faker.random.word(), last_name: faker.random.word()})

export const getApiDjRestAuthUserPartialUpdateMock = () => ({pk: faker.datatype.number({min: undefined, max: undefined}), username: faker.random.word(), email: faker.internet.email(), first_name: faker.random.word(), last_name: faker.random.word()})

export const getApiEnergyLogsListMock = () => ({count: faker.helpers.arrayElement([faker.datatype.number({min: undefined, max: undefined}), undefined]), next: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.internet.url(), null]), undefined]), previous: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.internet.url(), null]), undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.datatype.number({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, price: faker.random.word()})), undefined])})

export const getApiSchemaRetrieveMock = () => (faker.helpers.arrayElement([{
        'clmqkztfb0000miy143ar68kr': {}
      }, {
        'clmqkztfb0001miy1fh03auoh': {}
      }, {
        'clmqkztfc0002miy11olcfhpj': {}
      }, {
        'clmqkztfc0003miy1d9y6cu8e': {}
      }]))

export const getApiUserCarsListMock = () => ({count: faker.helpers.arrayElement([faker.datatype.number({min: undefined, max: undefined}), undefined]), next: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.internet.url(), null]), undefined]), previous: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.internet.url(), null]), undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.datatype.number({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.random.word(), model: faker.random.word(), year: faker.datatype.number({min: -2147483648, max: 2147483647}), max_energy: faker.random.word(), current_energy: faker.random.word(), is_charging: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), owner: faker.datatype.number({min: undefined, max: undefined})})), undefined])})

export const getApiUserCarsCreateMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.random.word(), model: faker.random.word(), year: faker.datatype.number({min: -2147483648, max: 2147483647}), max_energy: faker.random.word(), current_energy: faker.random.word(), is_charging: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), owner: faker.datatype.number({min: undefined, max: undefined})})

export const getApiUserCarsRetrieveMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.random.word(), model: faker.random.word(), year: faker.datatype.number({min: -2147483648, max: 2147483647}), max_energy: faker.random.word(), current_energy: faker.random.word(), is_charging: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), owner: faker.datatype.number({min: undefined, max: undefined})})

export const getApiUserCarsUpdateMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.random.word(), model: faker.random.word(), year: faker.datatype.number({min: -2147483648, max: 2147483647}), max_energy: faker.random.word(), current_energy: faker.random.word(), is_charging: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), owner: faker.datatype.number({min: undefined, max: undefined})})

export const getApiUserCarsPartialUpdateMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, name: faker.random.word(), model: faker.random.word(), year: faker.datatype.number({min: -2147483648, max: 2147483647}), max_energy: faker.random.word(), current_energy: faker.random.word(), is_charging: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), owner: faker.datatype.number({min: undefined, max: undefined})})

export const getApiUsersListMock = () => ({count: faker.helpers.arrayElement([faker.datatype.number({min: undefined, max: undefined}), undefined]), next: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.internet.url(), null]), undefined]), previous: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.internet.url(), null]), undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({username: faker.random.word(), name: faker.helpers.arrayElement([faker.random.word(), undefined]), url: faker.internet.url()})), undefined])})

export const getApiUsersRetrieveMock = () => ({username: faker.random.word(), name: faker.helpers.arrayElement([faker.random.word(), undefined]), url: faker.internet.url()})

export const getApiUsersUpdateMock = () => ({username: faker.random.word(), name: faker.helpers.arrayElement([faker.random.word(), undefined]), url: faker.internet.url()})

export const getApiUsersPartialUpdateMock = () => ({username: faker.random.word(), name: faker.helpers.arrayElement([faker.random.word(), undefined]), url: faker.internet.url()})

export const getApiUsersMeRetrieveMock = () => ({username: faker.random.word(), name: faker.helpers.arrayElement([faker.random.word(), undefined]), url: faker.internet.url()})

export const getApiMSW = () => [
rest.post('*/api/dj-rest-auth/login/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthLoginCreateMock()),
        )
      }),rest.post('*/api/dj-rest-auth/logout/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthLogoutCreateMock()),
        )
      }),rest.post('*/api/dj-rest-auth/password/change/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthPasswordChangeCreateMock()),
        )
      }),rest.post('*/api/dj-rest-auth/password/reset/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthPasswordResetCreateMock()),
        )
      }),rest.post('*/api/dj-rest-auth/password/reset/confirm/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthPasswordResetConfirmCreateMock()),
        )
      }),rest.post('*/api/dj-rest-auth/register/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthRegisterCreateMock()),
        )
      }),rest.get('*/api/dj-rest-auth/user/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthUserRetrieveMock()),
        )
      }),rest.put('*/api/dj-rest-auth/user/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthUserUpdateMock()),
        )
      }),rest.patch('*/api/dj-rest-auth/user/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiDjRestAuthUserPartialUpdateMock()),
        )
      }),rest.get('*/api/energy-logs/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiEnergyLogsListMock()),
        )
      }),rest.get('*/api/schema/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiSchemaRetrieveMock()),
        )
      }),rest.get('*/api/user-cars/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUserCarsListMock()),
        )
      }),rest.post('*/api/user-cars/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUserCarsCreateMock()),
        )
      }),rest.get('*/api/user-cars/:id/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUserCarsRetrieveMock()),
        )
      }),rest.put('*/api/user-cars/:id/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUserCarsUpdateMock()),
        )
      }),rest.patch('*/api/user-cars/:id/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUserCarsPartialUpdateMock()),
        )
      }),rest.delete('*/api/user-cars/:id/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/users/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUsersListMock()),
        )
      }),rest.get('*/api/users/:username/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUsersRetrieveMock()),
        )
      }),rest.put('*/api/users/:username/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUsersUpdateMock()),
        )
      }),rest.patch('*/api/users/:username/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUsersPartialUpdateMock()),
        )
      }),rest.get('*/api/users/me/', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getApiUsersMeRetrieveMock()),
        )
      }),]
